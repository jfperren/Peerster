#!/usr/bin/env bash

# This script tests the simple case of 5 gossipers sending each other files.
# The setup is a line A - B - C - D - E

go build
cd client
go build
cd ..

# Variables

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'
DEBUG="false"

UIPort=8080
gossipPort=5000
name="A"
rtimer=1

outputFiles=()
file_a="hello.txt"
file_b="poem.txt"
file_c="another_hello.txt"
file_d="my presentation.pdf"
file_e="highway_to_hell.mp3"

hash_a="690b8ffe922437a30cb89cab868aee4d1571e625c608f89cec8b6d6380b85af6"
hash_e="2730f375e4cfbb397bc0f74924ce01f08fc22cd8c5d6df65e1d094a409ebcb97"

chunks_a="0"
chunks_e="0,1,2,3"

downloadDir="_Downloads"
sharedDir="_SharedFiles"

# Start Gossipers & Clean folders

for i in `seq 1 5`;
do
	outFileName="logs/$name.out"
	peerPort=$((($gossipPort+1)%10+5000))
	peer="127.0.0.1:$peerPort"
	gossipAddr="127.0.0.1:$gossipPort"
  sharedDirName="$sharedDir/$name/"
  downloadDirName="$downloadDir/$name/"

	./Peerster -UIPort=$UIPort -gossipAddr=$gossipAddr -name=$name -peers=$peer -rtimer=$rtimer -verbose -separatefs > $outFileName &

  rm -rf $downloadDirName && mkdir $downloadDirName
  rm -rf $sharedDirName && mkdir $sharedDirName

	if [[ "$DEBUG" == "true" ]] ; then
		echo "$name running at UIPort $UIPort and gossipPort $gossipPort"
	fi

  outputFiles+=("$outFileName")
	UIPort=$(($UIPort+1))
	gossipPort=$(($gossipPort+1))
	name=$(echo "$name" | tr "A-Y" "B-Z")
done

sleep 2

# Create files

touch "$sharedDir/A/$file_a"
echo "Hello" > "$sharedDir/A/$file_a"

touch "$sharedDir/E/$file_b"

for i in `seq 1 20000`;
do
  line="This is an autogenerated poem from a computer, you are reading line $i"
  echo $line >> "$sharedDir/E/$file_b"
done

touch "$sharedDir/C/$file_c"

for i in `seq 1 2000`;
do
  line="This is an mp3 song, line $i"
  echo $line >> "$sharedDir/C/$file_c"
done

touch "$sharedDir/B/$file_d"

for i in `seq 1 4400`;
do
  line="This is a message that has spaces in the title. This is line $i"
  echo $line >> "$sharedDir/B/$file_d"
done

touch "$sharedDir/E/$file_e"

for i in `seq 1 600`;
do
  line="This is another hello.txt. This is line $i"
  echo $line >> "$sharedDir/E/$file_e"
done



# Upload files & start downloading

./client/client -UIPort=8080 -file="$file_a"
./client/client -UIPort=8084 -file="$file_b"
./client/client -UIPort=8082 -file="$file_c"
./client/client -UIPort=8081 -file="$file_d"
./client/client -UIPort=8084 -file="$file_e"

sleep 3

./client/client -UIPort=8082 -keywords="hell"

sleep 5

pkill -f Peerster

# Tests

failed="F"

expect_contains() {

  file="logs/${1}.out"
  regex=${2}

  if (grep -q "$regex" ${file}) ; then
    echo -e "${GREEN}- ${file} : <CONTAINS> ${regex}${GREEN}"
  else
    failed="T"
    echo -e "${RED}- ${file} : <MISSING> ${regex}${RED}"
  fi
}

echo -e "${NC}# Check that C's search got the expected results${NC}"

expect_contains C "FOUND match $file_a at A metafile=$hash_a chunks=$chunks_a"
expect_contains C "FOUND match $file_e at E metafile=$hash_e chunks=$chunks_e"

echo -e "${NC}# Check that C's search completed${NC}"

expect_contains C "SEARCH FINISHED"

if [[ "$failed" == "T" ]] ; then
	echo -e "${RED}***FAILED***${NC}"
else
	echo -e "${GREEN}***PASSED***${NC}"
fi
